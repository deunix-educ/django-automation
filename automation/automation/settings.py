"""
Django settings for automation project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
#import json
import os
from django.contrib.messages import constants as message_constants
from pathlib import Path
from decouple import config, Csv
from datetime import timedelta
#from contrib import utils

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PACKAGE_DIR = BASE_DIR.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

DJANGO_APP = config('DJANGO_APP')
os.environ["INFLUXDB_TOKEN"] = config('INFLUXDB_TOKEN')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)

DOMAIN_LOCAL_SERVER = config("DOMAIN_LOCAL_SERVER")
DOMAIN_SERVER = config("DOMAIN_SERVER")

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())
ALLOWED_HOSTS += [DOMAIN_LOCAL_SERVER, DOMAIN_SERVER, '*']

CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', cast=Csv())
CSRF_TRUSTED_ORIGINS += [f'https://{DOMAIN_LOCAL_SERVER}', f'https://{DOMAIN_SERVER}','http://192.168.100.1']

SECURE_CROSS_ORIGIN_OPENER_POLICY = None
#SECURE_SSL_REDIRECT = False
X_FRAME_OPTIONS = 'SAMEORIGIN'

# Application definition

INSTALLED_APPS = [
    'users',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    #'django_extensions',
    'django_celery_beat',
    'django_celery_results',
    'colorfield',
    'crispy_forms',
    'crispy_bulma',
    'axes',
    'automation',
    'devices',
    'reserves',
    'rosetta',
]

IS_LEAFLET=False
if IS_LEAFLET:
    INSTALLED_APPS += ['leaflet', ]

SITE_ID = 1

# user model
AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = (
    # AxesBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    #'axes.backends.AxesBackend',
    # Django ModelBackend is the default authentication backend.
    # because accounts app do not use axes.backends.AxesBackend
    'django.contrib.auth.backends.ModelBackend',
    #'contrib.auth.EmailBackend',
)

MIDDLEWARE = [
    #'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'automation.middleware.SetDefaultLangMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',

]

ROOT_URLCONF = 'automation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                #'django.template.context_processors.i18n',
                'automation.context_processors.params',
            ],
        },
    },
]

WSGI_APPLICATION = 'automation.wsgi.application'


CORS_ALLOWED_ORIGINS = [
    "http://10.8.0.1:8096",
    "http://192.168.1.4:8086",
]

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_HEADERS = (
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
)

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


DATABASE_NAME = config('DATABASE_NAME')
DATABASE_USER = config('DATABASE_USER')
DATABASE_PASSWORD = config('DATABASE_PASSWORD')

SQLITE3=config('SQLITE3')
MARIADB=config('MARIADB')
POSTGRES=config('POSTGRES')

DATABASES = {
    SQLITE3: {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'db.sqlite3',
        "OPTIONS": {
            "timeout": 20,
        },
    },
    MARIADB: {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS' : {
            "init_command": "SET foreign_key_checks = 0;SET sql_mode='STRICT_TRANS_TABLES';",
            },
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': config("DATABASE_MARIADB_HOST"),
        'PORT': config("DATABASE_MARIADB_PORT", cast=int),
    },
    POSTGRES: {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': DATABASE_NAME,
        'USER': DATABASE_USER,
        'PASSWORD': DATABASE_PASSWORD,
        'HOST': config("DATABASE_POSTGRES_HOST"),
        'PORT': config("DATABASE_POSTGRES_PORT", cast=int),
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
#LANGUAGE_CODE = 'en-US'
#LANGUAGE_CODE = 'fr-FR'

LANGUAGE_CODE = config('LANGUAGE_CODE')

LANGUAGES = (
    ('fr', 'Fran√ßais'),
    ('en', 'English'),
    ('de', 'German'),
)

TIME_ZONE = config('TIME_ZONE')
USE_I18N = True
USE_L10N = True
USE_TZ = False

LOCALE_CODE = config('LOCALE_CODE')
LOCALE_LC_ALL = config('LOCALE_LC_ALL')

LOCALE_PATHS = (
    BASE_DIR / DJANGO_APP / 'locale',
    BASE_DIR / 'users' / 'locale',
    BASE_DIR / 'devices' / 'locale',
    BASE_DIR / 'reserves' / 'locale',
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

VIDEO_ROOT = MEDIA_ROOT / 'video'
AUDIO_ROOT =  MEDIA_ROOT / 'audio'

DEVICES_TEMPLATES_ROOT = BASE_DIR / 'devices' / 'templates' / 'devices'
DASHBOARD_TEMPLATES_ROOT = BASE_DIR / DJANGO_APP / 'templates' / 'dashboard'

STATICFILES_DIRS = [
    BASE_DIR / 'automation/static',
    BASE_DIR / 'users/static',
    BASE_DIR / 'devices/static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

## LOGGING
# CRITICAL=50, ERROR=40, WARN=30, INFO=20, DEBUG=10 and NOTSET=0
LOGGING_FILE = config('LOGGING_FILE')

if DEBUG:
    LOGGING_FILE = f'{DJANGO_APP}.log'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(asctime)s - %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': LOGGING_FILE,
            'maxBytes': 1024*1024*15, # 15MB
            'backupCount': 10,
            'formatter': 'simple',
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        DJANGO_APP: {
            'handlers': ['file', ],
            'propagate': True,
            'level': 'INFO',
        },
         'axes': {
            'handlers': ['file', ],
            'propagate': True,
            'level': 'INFO',
        },
        'devices': {
            'handlers': ['file', ],
            'propagate': True,
            'level': 'INFO',
        },
    },
}

# ACCOUNT
#
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = "/"

##
# application
ADMINS = [
    (config('SUPERADMIN_MAIL'), config('SUPERADMIN'), config('SUPERADMIN_PASS'), True),
    (config('DEFAULT_USER_MAIL'), config('DEFAULT_USER'), config('DEFAULT_USER_PASS'), False),
]
MANAGERS = ADMINS

# w3 css
MESSAGE_TAGS = {
    message_constants.DEBUG: 'w3-purple',
    message_constants.INFO: 'w3-blue',
    message_constants.SUCCESS: 'w3-green',
    message_constants.WARNING: 'w3-orange',
    message_constants.ERROR: 'w3-red',
}

# Default css classes for widgets and labels
DEFAULT_CSS = {
   'error': 'w3-panel w3-red',          # displayed in the label
   'errorlist': 'w3-padding-8 w3-red',  # encloses the error list
   'required': 'w3-text-indigo',        # used in the label and label + input enclosing box. NB: w3-validate only works if the input precedes the label!
   'label': 'w3-label',
   'Textarea': 'w3-input w3-border',
   'TextInput': 'w3-input w3-border',
   'Select': 'w3-select w3-border',
}

# django mail
#
DEFAULT_HTTP_PROTOCOL = config("DEFAULT_HTTP_PROTOCOL")
DEFAULT_TO_EMAIL = config("DEFAULT_TO_EMAIL")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")
DEFAULT_EMAIL_CONTACT = config("DEFAULT_EMAIL_CONTACT")

EMAIL_BACKEND = config("EMAIL_BACKEND")
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT", cast=int)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)

## AXES
#

AXES_IPWARE_META_PRECEDENCE_ORDER = ['HTTP_X_FORWARDED_FOR','REMOTE_ADDR', ]
AXES_LOCKOUT_PARAMETERS = ["ip_address", "user_agent"]
SILENCED_SYSTEM_CHECKS = ['axes.W003']
AXES_ENABLED = True
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = timedelta(minutes=15)
AXES_RESET_ON_SUCCESS=True

# crispy forms
#

CRISPY_CLASS_CONVERTERS = {
    'textinput': "w3-input w3-border w3-round",
    'passwordinput': "w3-input w3-border w3-round",
    'select': "w3-select",
    'urlinput': "w3-input w3-border w3-round",
    'numberinput': "w3-input w3-border w3-round",
    'emailinput': "w3-input w3-border w3-round",
    'dateinput': "3-input w3-border w3-round",
    'textarea': "w3-input w3-border w3-round",
    'passwordinput': "w3-input w3-border w3-round",

}
CRISPY_ALLOWED_TEMPLATE_PACKS = ("bulma",)
CRISPY_TEMPLATE_PACK = "bulma"

#######################################
## plotly
#
RANGE_SELECTOR = [1, 2, 3, 4, 5, 6, 7, 15, 30, 60, 90, 180]

## PHONENUMBER
#
"""
PHONENUMBER_DB_FORMAT = 'NATIONAL' #'INTERNATIONAL'  #'NATIONAL'
PHONENUMBER_DEFAULT_REGION = 'FR'
"""

## CELERY tasks
#
#from celery.schedules import crontab
REDIS_HOST_PORT = f'{config("REDIS_HOST")}:{config("REDIS_PORT")}'
CELERY_RESULT_BACKEND = f"redis://{REDIS_HOST_PORT}/1"
CELERY_BROKER_URL = f"redis://{REDIS_HOST_PORT}/0"
CELERY_TASK_RESULT_EXPIRES=3600

CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = False

CELERY_TIMEZONE=TIME_ZONE
DJANGO_CELERY_BEAT_TZ_AWARE = False
CELERY_ENABLE_UTC = False
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'

CELERY_RESULT_EXTENDED = True
CELERY_RESULT_BACKEND = 'django-db'
DJANGO_CELERY_RESULTS_TASK_ID_MAX_LENGTH=191


# WORKER mqtt
#
# origine/uuid/evt/sensor
ORIGINE = config('ORIGINE')
GATEWAY = config('GATEWAY')
UUID = config('UUID')

# mosquitto
MQTT_MASTER_HOST = config('MQTT_MASTER_HOST')
MQTT_MASTER_PORT = config('MQTT_MASTER_PORT', cast=int)
MQTT_CLIENT_HOST = config('MQTT_CLIENT_HOST')
MQTT_CLIENT_PORT = config('MQTT_CLIENT_PORT', cast=int)
MQTT_USERNAME = config('MQTT_USERNAME')
MQTT_PASSWORD = config('MQTT_PASSWORD')
MQTT_SSL = config('MQTT_SSL', cast=bool)
MQTT_CA_CERT = config('MQTT_CA_CERT')
TOPIC_BASE = f'{ORIGINE}/{UUID}'
TOPIC_SUBS = [ [f'{ORIGINE}/#', 0], [f"{GATEWAY}/#", 0], ]

# mqtt client  dashboard
#
MQTT_CLIENT  = dict(
    host = MQTT_CLIENT_HOST,
    port = MQTT_CLIENT_PORT,
    username = MQTT_USERNAME,
    password = MQTT_PASSWORD,
    use_ssl=MQTT_SSL,
    keepalive=60,
    clean_session=True,
    topic_base = TOPIC_BASE,
    #topic_subs = json.dumps(TOPIC_SUBS),
    topic_subs = TOPIC_SUBS,
    uuid = UUID,
    org=ORIGINE,
    gw=GATEWAY,
)

# mqtt client master service: port local 1883
#
MQTT_MASTER_WORKER = dict(
    host=MQTT_MASTER_HOST,
    port=MQTT_MASTER_PORT,
    username=MQTT_USERNAME,
    password=MQTT_PASSWORD,
    use_ssl=MQTT_SSL,
    ca_cert=MQTT_CA_CERT,
    keepalive=60,
    clean_session=True,
    topic_base=TOPIC_BASE,
    topic_subs=TOPIC_SUBS,
    uuid=UUID,
    org=ORIGINE,
    gw=GATEWAY,
)

MQTT_SINGLE = dict(
    hostname    = MQTT_MASTER_HOST, #MQTT_CLIENT_HOST,
    port        = MQTT_MASTER_PORT, #MQTT_CLIENT_PORT,
    keepalive   = 60,
    qos         = 0,
    retain      = False,
    auth        = {'username': MQTT_USERNAME, 'password': MQTT_PASSWORD },
    tls         = MQTT_SSL or None,
)

MQTT_TOPIC_ARGS = dict(org=0, uuid=1, evt=2, action=3, ts=3, counter=4, lat=5, lon=6, fps=7)

# influxdb
#
INFLUXDB_TOKEN = config('INFLUXDB_TOKEN')
INFLUXDB_ORG_ID = config('INFLUXDB_ORG_ID')
INFLUXDB_ORG = config('INFLUXDB_ORG')
INFLUXDB_URL = f"{config('INFLUXDB_HOST')}:{config('INFLUXDB_PORT')}"


# app
#
APP_TITLE = config("APP_TITLE")
APP_SUB_TITLE = config("APP_SUB_TITLE")
APP_MENU_TABS = range(2)

